{
  "contract_name": "module-schema",
  "contract_version": "0.22.3",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "App instantiate message",
    "type": "object",
    "required": [
      "accept_proposal_from_gov"
    ],
    "properties": {
      "accept_proposal_from_gov": {
        "$ref": "#/definitions/Members"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "Members": {
        "type": "object",
        "required": [
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChainName"
            }
          }
        },
        "additionalProperties": false
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "App execute messages",
    "oneOf": [
      {
        "description": "Called by gov when a chain wants to create a proposal",
        "type": "object",
        "required": [
          "propose"
        ],
        "properties": {
          "propose": {
            "type": "object",
            "required": [
              "proposal"
            ],
            "properties": {
              "proposal": {
                "$ref": "#/definitions/ProposalMsg"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Finalize the proposal state",
        "type": "object",
        "required": [
          "finalize"
        ],
        "properties": {
          "finalize": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Execute the proposal state",
        "type": "object",
        "required": [
          "execute"
        ],
        "properties": {
          "execute": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Called by gov to vote on a proposal",
        "type": "object",
        "required": [
          "vote_proposal"
        ],
        "properties": {
          "vote_proposal": {
            "type": "object",
            "required": [
              "governance",
              "prop_id",
              "vote"
            ],
            "properties": {
              "governance": {
                "$ref": "#/definitions/Governance"
              },
              "prop_id": {
                "type": "string"
              },
              "vote": {
                "$ref": "#/definitions/Vote"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Request results from remote chains",
        "type": "object",
        "required": [
          "request_vote_results"
        ],
        "properties": {
          "request_vote_results": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "request_gov_vote_details"
        ],
        "properties": {
          "request_gov_vote_details": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_accept_gov_invite"
        ],
        "properties": {
          "set_accept_gov_invite": {
            "type": "object",
            "required": [
              "members"
            ],
            "properties": {
              "members": {
                "description": "only accept invites for groups with these members",
                "allOf": [
                  {
                    "$ref": "#/definitions/Members"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "tally_proposal"
        ],
        "properties": {
          "tally_proposal": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "test_add_members"
        ],
        "properties": {
          "test_add_members": {
            "type": "object",
            "required": [
              "members"
            ],
            "properties": {
              "members": {
                "$ref": "#/definitions/Members"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "temporary_register_remote_gov_module_addrs"
        ],
        "properties": {
          "temporary_register_remote_gov_module_addrs": {
            "type": "object",
            "required": [
              "modules"
            ],
            "properties": {
              "modules": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "$ref": "#/definitions/ChainName"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "ChainName": {
        "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Governance": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "cosmos_s_d_k"
            ],
            "properties": {
              "cosmos_s_d_k": {
                "type": "object",
                "required": [
                  "proposal_id"
                ],
                "properties": {
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "dao_dao"
            ],
            "properties": {
              "dao_dao": {
                "type": "object",
                "required": [
                  "dao_address",
                  "proposal_id"
                ],
                "properties": {
                  "dao_address": {
                    "type": "string"
                  },
                  "proposal_id": {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "manual"
            ],
            "properties": {
              "manual": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Members": {
        "type": "object",
        "required": [
          "members"
        ],
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/ChainName"
            }
          }
        },
        "additionalProperties": false
      },
      "ProposalAction": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "signal"
            ]
          },
          {
            "type": "object",
            "required": [
              "update_members"
            ],
            "properties": {
              "update_members": {
                "type": "object",
                "required": [
                  "members"
                ],
                "properties": {
                  "members": {
                    "$ref": "#/definitions/Members"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ProposalMsg": {
        "type": "object",
        "required": [
          "action",
          "description",
          "expiration",
          "title"
        ],
        "properties": {
          "action": {
            "description": "A standard action that the group can run",
            "allOf": [
              {
                "$ref": "#/definitions/ProposalAction"
              }
            ]
          },
          "description": {
            "description": "The main body of the proposal text",
            "type": "string"
          },
          "expiration": {
            "description": "The the time at which this proposal will expire and close for additional votes.",
            "allOf": [
              {
                "$ref": "#/definitions/Expiration"
              }
            ]
          },
          "min_voting_period": {
            "description": "The minimum amount of time this proposal must remain open for voting. The proposal may not pass unless this is expired or None.",
            "anyOf": [
              {
                "$ref": "#/definitions/Expiration"
              },
              {
                "type": "null"
              }
            ]
          },
          "title": {
            "description": "The title of the proposal",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "Vote": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "yes",
              "no",
              "no_vote"
            ]
          },
          {
            "type": "object",
            "required": [
              "ratio"
            ],
            "properties": {
              "ratio": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "additionalProperties": false
          }
        ]
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "App query messages",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "members"
        ],
        "properties": {
          "members": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proposals"
        ],
        "properties": {
          "proposals": {
            "type": "object",
            "required": [
              "proposal_ids"
            ],
            "properties": {
              "proposal_ids": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_proposals"
        ],
        "properties": {
          "list_proposals": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "list_proposal_states"
        ],
        "properties": {
          "list_proposal_states": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proposal"
        ],
        "properties": {
          "proposal": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "proposal_state"
        ],
        "properties": {
          "proposal_state": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Get the local vote",
        "type": "object",
        "required": [
          "vote"
        ],
        "properties": {
          "vote": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "vote_results"
        ],
        "properties": {
          "vote_results": {
            "type": "object",
            "required": [
              "prop_id"
            ],
            "properties": {
              "prop_id": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "An empty struct that serves as a placeholder in different places, such as contracts that don't set a custom message.\n\nIt is designed to be expressable in correct JSON and JSON Schema but contains no meaningful data. Previously we used enums without cases, but those cannot represented as valid JSON Schema (https://github.com/CosmWasm/cosmwasm/issues/451)",
    "type": "object"
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "additionalProperties": false
    },
    "list_proposal_states": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProposalStateResponse",
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MapState"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "DataState": {
          "description": "Different statuses for a data item",
          "type": "string",
          "enum": [
            "initiated",
            "proposed"
          ]
        },
        "MapState": {
          "type": "object",
          "required": [
            "change",
            "namespace",
            "proposal_id",
            "state"
          ],
          "properties": {
            "change": {
              "$ref": "#/definitions/StateChange"
            },
            "namespace": {
              "type": "string"
            },
            "proposal_id": {
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/DataState"
            }
          },
          "additionalProperties": false
        },
        "StateChange": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "backup"
              ],
              "properties": {
                "backup": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "proposal"
              ],
              "properties": {
                "proposal": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "list_proposals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProposalsResponse",
      "type": "object",
      "required": [
        "proposals"
      ],
      "properties": {
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProposalResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "DataState": {
          "description": "Different statuses for a data item",
          "type": "string",
          "enum": [
            "initiated",
            "proposed"
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Members": {
          "type": "object",
          "required": [
            "members"
          ],
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        },
        "PercentageThreshold": {
          "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `vote_weights >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
          "oneOf": [
            {
              "description": "The majority of voters must vote yes for the proposal to pass.",
              "type": "object",
              "required": [
                "majority"
              ],
              "properties": {
                "majority": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
              "type": "object",
              "required": [
                "percent"
              ],
              "properties": {
                "percent": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Proposal": {
          "type": "object",
          "required": [
            "action",
            "description",
            "expiration",
            "proposer",
            "proposer_chain",
            "threshold",
            "title"
          ],
          "properties": {
            "action": {
              "description": "Action that the group will perform",
              "allOf": [
                {
                  "$ref": "#/definitions/ProposalAction"
                }
              ]
            },
            "description": {
              "description": "The main body of the proposal text",
              "type": "string"
            },
            "expiration": {
              "description": "The the time at which this proposal will expire and close for additional votes.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "min_voting_period": {
              "description": "The minimum amount of time this proposal must remain open for voting. The proposal may not pass unless this is expired or None.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "proposer": {
              "description": "The address that created this proposal. Needs to be a string to be translatable.",
              "type": "string"
            },
            "proposer_chain": {
              "description": "The chain that created this proposal",
              "allOf": [
                {
                  "$ref": "#/definitions/ChainName"
                }
              ]
            },
            "threshold": {
              "description": "The threshold at which this proposal will pass.",
              "allOf": [
                {
                  "$ref": "#/definitions/Threshold"
                }
              ]
            },
            "title": {
              "description": "The title of the proposal",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProposalAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "signal"
              ]
            },
            {
              "type": "object",
              "required": [
                "update_members"
              ],
              "properties": {
                "update_members": {
                  "type": "object",
                  "required": [
                    "members"
                  ],
                  "properties": {
                    "members": {
                      "$ref": "#/definitions/Members"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ProposalResponse": {
          "type": "object",
          "required": [
            "prop",
            "prop_id"
          ],
          "properties": {
            "prop": {
              "$ref": "#/definitions/Proposal"
            },
            "prop_id": {
              "type": "string"
            },
            "state": {
              "anyOf": [
                {
                  "$ref": "#/definitions/DataState"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Threshold": {
          "description": "The ways a proposal may reach its passing / failing threshold.",
          "oneOf": [
            {
              "description": "Declares a percentage of the total weight that must cast Yes votes in order for a proposal to pass.  See `ThresholdResponse::AbsolutePercentage` in the cw3 spec for details.",
              "type": "object",
              "required": [
                "absolute_percentage"
              ],
              "properties": {
                "absolute_percentage": {
                  "type": "object",
                  "required": [
                    "percentage"
                  ],
                  "properties": {
                    "percentage": {
                      "$ref": "#/definitions/PercentageThreshold"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Declares a `quorum` of the total votes that must participate in the election in order for the vote to be considered at all. See `ThresholdResponse::ThresholdQuorum` in the cw3 spec for details.",
              "type": "object",
              "required": [
                "threshold_quorum"
              ],
              "properties": {
                "threshold_quorum": {
                  "type": "object",
                  "required": [
                    "quorum",
                    "threshold"
                  ],
                  "properties": {
                    "quorum": {
                      "$ref": "#/definitions/PercentageThreshold"
                    },
                    "threshold": {
                      "$ref": "#/definitions/PercentageThreshold"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "An absolute number of votes needed for something to cross the threshold. Useful for multisig style voting.",
              "type": "object",
              "required": [
                "absolute_count"
              ],
              "properties": {
                "absolute_count": {
                  "type": "object",
                  "required": [
                    "threshold"
                  ],
                  "properties": {
                    "threshold": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "members": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MembersResponse",
      "type": "object",
      "required": [
        "members"
      ],
      "properties": {
        "members": {
          "$ref": "#/definitions/Members"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "Members": {
          "type": "object",
          "required": [
            "members"
          ],
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        }
      }
    },
    "proposal": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProposalResponse",
      "type": "object",
      "required": [
        "prop",
        "prop_id"
      ],
      "properties": {
        "prop": {
          "$ref": "#/definitions/Proposal"
        },
        "prop_id": {
          "type": "string"
        },
        "state": {
          "anyOf": [
            {
              "$ref": "#/definitions/DataState"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "DataState": {
          "description": "Different statuses for a data item",
          "type": "string",
          "enum": [
            "initiated",
            "proposed"
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Members": {
          "type": "object",
          "required": [
            "members"
          ],
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        },
        "PercentageThreshold": {
          "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `vote_weights >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
          "oneOf": [
            {
              "description": "The majority of voters must vote yes for the proposal to pass.",
              "type": "object",
              "required": [
                "majority"
              ],
              "properties": {
                "majority": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
              "type": "object",
              "required": [
                "percent"
              ],
              "properties": {
                "percent": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Proposal": {
          "type": "object",
          "required": [
            "action",
            "description",
            "expiration",
            "proposer",
            "proposer_chain",
            "threshold",
            "title"
          ],
          "properties": {
            "action": {
              "description": "Action that the group will perform",
              "allOf": [
                {
                  "$ref": "#/definitions/ProposalAction"
                }
              ]
            },
            "description": {
              "description": "The main body of the proposal text",
              "type": "string"
            },
            "expiration": {
              "description": "The the time at which this proposal will expire and close for additional votes.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "min_voting_period": {
              "description": "The minimum amount of time this proposal must remain open for voting. The proposal may not pass unless this is expired or None.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "proposer": {
              "description": "The address that created this proposal. Needs to be a string to be translatable.",
              "type": "string"
            },
            "proposer_chain": {
              "description": "The chain that created this proposal",
              "allOf": [
                {
                  "$ref": "#/definitions/ChainName"
                }
              ]
            },
            "threshold": {
              "description": "The threshold at which this proposal will pass.",
              "allOf": [
                {
                  "$ref": "#/definitions/Threshold"
                }
              ]
            },
            "title": {
              "description": "The title of the proposal",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProposalAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "signal"
              ]
            },
            {
              "type": "object",
              "required": [
                "update_members"
              ],
              "properties": {
                "update_members": {
                  "type": "object",
                  "required": [
                    "members"
                  ],
                  "properties": {
                    "members": {
                      "$ref": "#/definitions/Members"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Threshold": {
          "description": "The ways a proposal may reach its passing / failing threshold.",
          "oneOf": [
            {
              "description": "Declares a percentage of the total weight that must cast Yes votes in order for a proposal to pass.  See `ThresholdResponse::AbsolutePercentage` in the cw3 spec for details.",
              "type": "object",
              "required": [
                "absolute_percentage"
              ],
              "properties": {
                "absolute_percentage": {
                  "type": "object",
                  "required": [
                    "percentage"
                  ],
                  "properties": {
                    "percentage": {
                      "$ref": "#/definitions/PercentageThreshold"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Declares a `quorum` of the total votes that must participate in the election in order for the vote to be considered at all. See `ThresholdResponse::ThresholdQuorum` in the cw3 spec for details.",
              "type": "object",
              "required": [
                "threshold_quorum"
              ],
              "properties": {
                "threshold_quorum": {
                  "type": "object",
                  "required": [
                    "quorum",
                    "threshold"
                  ],
                  "properties": {
                    "quorum": {
                      "$ref": "#/definitions/PercentageThreshold"
                    },
                    "threshold": {
                      "$ref": "#/definitions/PercentageThreshold"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "An absolute number of votes needed for something to cross the threshold. Useful for multisig style voting.",
              "type": "object",
              "required": [
                "absolute_count"
              ],
              "properties": {
                "absolute_count": {
                  "type": "object",
                  "required": [
                    "threshold"
                  ],
                  "properties": {
                    "threshold": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "proposal_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Nullable_MapState",
      "anyOf": [
        {
          "$ref": "#/definitions/MapState"
        },
        {
          "type": "null"
        }
      ],
      "definitions": {
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
          "type": "string"
        },
        "DataState": {
          "description": "Different statuses for a data item",
          "type": "string",
          "enum": [
            "initiated",
            "proposed"
          ]
        },
        "MapState": {
          "type": "object",
          "required": [
            "change",
            "namespace",
            "proposal_id",
            "state"
          ],
          "properties": {
            "change": {
              "$ref": "#/definitions/StateChange"
            },
            "namespace": {
              "type": "string"
            },
            "proposal_id": {
              "type": "string"
            },
            "state": {
              "$ref": "#/definitions/DataState"
            }
          },
          "additionalProperties": false
        },
        "StateChange": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "backup"
              ],
              "properties": {
                "backup": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "proposal"
              ],
              "properties": {
                "proposal": {
                  "$ref": "#/definitions/Binary"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "proposals": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ProposalsResponse",
      "type": "object",
      "required": [
        "proposals"
      ],
      "properties": {
        "proposals": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProposalResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "DataState": {
          "description": "Different statuses for a data item",
          "type": "string",
          "enum": [
            "initiated",
            "proposed"
          ]
        },
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        },
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Members": {
          "type": "object",
          "required": [
            "members"
          ],
          "properties": {
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ChainName"
              }
            }
          },
          "additionalProperties": false
        },
        "PercentageThreshold": {
          "description": "A percentage of voting power that must vote yes for a proposal to pass. An example of why this is needed:\n\nIf a user specifies a 60% passing threshold, and there are 10 voters they likely expect that proposal to pass when there are 6 yes votes. This implies that the condition for passing should be `vote_weights >= total_votes * threshold`.\n\nWith this in mind, how should a user specify that they would like proposals to pass if the majority of voters choose yes? Selecting a 50% passing threshold with those rules doesn't properly cover that case as 5 voters voting yes out of 10 would pass the proposal. Selecting 50.0001% or or some variation of that also does not work as a very small yes vote which technically makes the majority yes may not reach that threshold.\n\nTo handle these cases we provide both a majority and percent option for all percentages. If majority is selected passing will be determined by `yes > total_votes * 0.5`. If percent is selected passing is determined by `yes >= total_votes * percent`.\n\nIn both of these cases a proposal with only abstain votes must fail. This requires a special case passing logic.",
          "oneOf": [
            {
              "description": "The majority of voters must vote yes for the proposal to pass.",
              "type": "object",
              "required": [
                "majority"
              ],
              "properties": {
                "majority": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "A percentage of voting power >= percent must vote yes for the proposal to pass.",
              "type": "object",
              "required": [
                "percent"
              ],
              "properties": {
                "percent": {
                  "$ref": "#/definitions/Decimal"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Proposal": {
          "type": "object",
          "required": [
            "action",
            "description",
            "expiration",
            "proposer",
            "proposer_chain",
            "threshold",
            "title"
          ],
          "properties": {
            "action": {
              "description": "Action that the group will perform",
              "allOf": [
                {
                  "$ref": "#/definitions/ProposalAction"
                }
              ]
            },
            "description": {
              "description": "The main body of the proposal text",
              "type": "string"
            },
            "expiration": {
              "description": "The the time at which this proposal will expire and close for additional votes.",
              "allOf": [
                {
                  "$ref": "#/definitions/Expiration"
                }
              ]
            },
            "min_voting_period": {
              "description": "The minimum amount of time this proposal must remain open for voting. The proposal may not pass unless this is expired or None.",
              "anyOf": [
                {
                  "$ref": "#/definitions/Expiration"
                },
                {
                  "type": "null"
                }
              ]
            },
            "proposer": {
              "description": "The address that created this proposal. Needs to be a string to be translatable.",
              "type": "string"
            },
            "proposer_chain": {
              "description": "The chain that created this proposal",
              "allOf": [
                {
                  "$ref": "#/definitions/ChainName"
                }
              ]
            },
            "threshold": {
              "description": "The threshold at which this proposal will pass.",
              "allOf": [
                {
                  "$ref": "#/definitions/Threshold"
                }
              ]
            },
            "title": {
              "description": "The title of the proposal",
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "ProposalAction": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "signal"
              ]
            },
            {
              "type": "object",
              "required": [
                "update_members"
              ],
              "properties": {
                "update_members": {
                  "type": "object",
                  "required": [
                    "members"
                  ],
                  "properties": {
                    "members": {
                      "$ref": "#/definitions/Members"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "ProposalResponse": {
          "type": "object",
          "required": [
            "prop",
            "prop_id"
          ],
          "properties": {
            "prop": {
              "$ref": "#/definitions/Proposal"
            },
            "prop_id": {
              "type": "string"
            },
            "state": {
              "anyOf": [
                {
                  "$ref": "#/definitions/DataState"
                },
                {
                  "type": "null"
                }
              ]
            }
          },
          "additionalProperties": false
        },
        "Threshold": {
          "description": "The ways a proposal may reach its passing / failing threshold.",
          "oneOf": [
            {
              "description": "Declares a percentage of the total weight that must cast Yes votes in order for a proposal to pass.  See `ThresholdResponse::AbsolutePercentage` in the cw3 spec for details.",
              "type": "object",
              "required": [
                "absolute_percentage"
              ],
              "properties": {
                "absolute_percentage": {
                  "type": "object",
                  "required": [
                    "percentage"
                  ],
                  "properties": {
                    "percentage": {
                      "$ref": "#/definitions/PercentageThreshold"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Declares a `quorum` of the total votes that must participate in the election in order for the vote to be considered at all. See `ThresholdResponse::ThresholdQuorum` in the cw3 spec for details.",
              "type": "object",
              "required": [
                "threshold_quorum"
              ],
              "properties": {
                "threshold_quorum": {
                  "type": "object",
                  "required": [
                    "quorum",
                    "threshold"
                  ],
                  "properties": {
                    "quorum": {
                      "$ref": "#/definitions/PercentageThreshold"
                    },
                    "threshold": {
                      "$ref": "#/definitions/PercentageThreshold"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "An absolute number of votes needed for something to cross the threshold. Useful for multisig style voting.",
              "type": "object",
              "required": [
                "absolute_count"
              ],
              "properties": {
                "absolute_count": {
                  "type": "object",
                  "required": [
                    "threshold"
                  ],
                  "properties": {
                    "threshold": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "vote": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VoteResponse",
      "type": "object",
      "required": [
        "chain",
        "governance",
        "prop_id",
        "vote"
      ],
      "properties": {
        "chain": {
          "$ref": "#/definitions/ChainName"
        },
        "governance": {
          "$ref": "#/definitions/Governance"
        },
        "prop_id": {
          "type": "string"
        },
        "vote": {
          "$ref": "#/definitions/Vote"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "Governance": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cosmos_s_d_k"
              ],
              "properties": {
                "cosmos_s_d_k": {
                  "type": "object",
                  "required": [
                    "proposal_id"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dao_dao"
              ],
              "properties": {
                "dao_dao": {
                  "type": "object",
                  "required": [
                    "dao_address",
                    "proposal_id"
                  ],
                  "properties": {
                    "dao_address": {
                      "type": "string"
                    },
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "manual"
              ],
              "properties": {
                "manual": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Vote": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "yes",
                "no",
                "no_vote"
              ]
            },
            {
              "type": "object",
              "required": [
                "ratio"
              ],
              "properties": {
                "ratio": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    },
    "vote_results": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "VoteResultsResponse",
      "type": "object",
      "required": [
        "prop_id",
        "results"
      ],
      "properties": {
        "prop_id": {
          "type": "string"
        },
        "results": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "$ref": "#/definitions/ChainName"
              },
              {
                "anyOf": [
                  {
                    "$ref": "#/definitions/GovernanceVote"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "ChainName": {
          "description": "The name of a chain, aka the chain-id without the post-fix number. ex. `cosmoshub-4` -> `cosmoshub`, `juno-1` -> `juno`",
          "type": "string"
        },
        "Governance": {
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cosmos_s_d_k"
              ],
              "properties": {
                "cosmos_s_d_k": {
                  "type": "object",
                  "required": [
                    "proposal_id"
                  ],
                  "properties": {
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "dao_dao"
              ],
              "properties": {
                "dao_dao": {
                  "type": "object",
                  "required": [
                    "dao_address",
                    "proposal_id"
                  ],
                  "properties": {
                    "dao_address": {
                      "type": "string"
                    },
                    "proposal_id": {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "required": [
                "manual"
              ],
              "properties": {
                "manual": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "GovernanceVote": {
          "type": "object",
          "required": [
            "governance",
            "vote"
          ],
          "properties": {
            "governance": {
              "$ref": "#/definitions/Governance"
            },
            "vote": {
              "$ref": "#/definitions/Vote"
            }
          },
          "additionalProperties": false
        },
        "Vote": {
          "oneOf": [
            {
              "type": "string",
              "enum": [
                "yes",
                "no",
                "no_vote"
              ]
            },
            {
              "type": "object",
              "required": [
                "ratio"
              ],
              "properties": {
                "ratio": {
                  "type": "array",
                  "items": [
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    },
                    {
                      "type": "integer",
                      "format": "uint64",
                      "minimum": 0.0
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              },
              "additionalProperties": false
            }
          ]
        }
      }
    }
  }
}
